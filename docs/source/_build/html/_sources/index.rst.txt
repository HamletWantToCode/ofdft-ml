.. OFDFT-ML documentation master file, created by
   sphinx-quickstart on Sun Jan 20 16:17:12 2019.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Home
====

OFDFT-ML: Orbital free density functional theory run on machine learning
------------------------------------------------------------------------

This project is aimed to implement the orbital free density functional theory in a machine learning way, our method will learn a effective energy functional from DFT calculated dataset, and find the ground state electron density of a given potential by solving Euler-Lagrange equation.

The project is organized as follows:
* quantum subpackage: solve Schrodinger equation with a periodic potential in momentum space, solve Schrodinger equation with a finite range potential in real space
* statslib subpackage: machine learning program library
* tools: scripts used to generate dataset, analyze data and learning

Installation
------------

*Install OFDFT-ML from GitHub source:*

First, clone OFDFT-ML using `git`::

	git clone https://github.com/HamletWantToCode/ofdft-ml.git

Then, `cd` to the ofdft-ml folder and run the install command (install in develop mode)::

	cd ofdft-ml
	pip install -e .

Requirement
-----------

Required packages:
* numpy 
* scipy
* matplotlib
* mpi4py
* scikit-learn==0.19.1

Python version 3.6

Getting started
---------------

Generate DFT data
^^^^^^^^^^^^^^^^^

To generate density and kinetic energy of electron in a periodic potential::

	database.py -n 100 --params quantum_params k

will generate a dataset contains 100 data samples (each is a density-kinetic energy pair), the parameters used to generate the dataset are specified in "quantum_params" file, extra label `k` here is used to indicate that we are solving Schrodinger's equation in momentum space. 

the "quantum_params" file is a plain text file with lines::

	n_basis=10    # indicate the number of plane wave basis being used to expand the wavefunction
	n_kpoints=100 # indicate the number of k points sampled in the 1st BZ
	n_cosin=3     # indicate the number of cosin functions used to construct the periodic potential 
	V0=1:10       # indicate the range of the amplitudes of the cosin functions (positive)
	Phi0=-0.2:0.2 # indicate the range of phase of the cosin functions
	occ=1         # indicate the electron occupation in a unit cell

To generate density and kinetic energy of electron in a finite range potential (Burke's case)::

	database.py -n 100 --params quantum_params x

the "quantum_params" file is only different in specifying potential energy parameters, and the label `x` is used to indicate that we are solving Schrodinger equation in real space.

You can also use MPI to speedup the generating process::

	mpirun -n 4 database.py -n 100 --params quantum_params k

Data preprocessing
^^^^^^^^^^^^^^^^^^

You can visulize the electron density and potential distribution in real space using::

	plot_rawdata.py --f_dens density_in_x --f_Vx potential_in_x

this will gives you "density_distribution.png" and "Vx_distribution.png".

you can also run PCA to view electron density data, which is 500 dimension in a 2 dimensional space::

	data_process.py -f density_in_x proc

the label `proc` represents for preprocessing.

*NOTE*: if you use `k` label in the data generating process, the Fourier components of electron density in momentum space is stored in dataset. In this case, you should first transfer the electron density to real space by::

	k2x.py -n 500 -f density_in_k:potential_in_k

Model selection
^^^^^^^^^^^^^^^

Machine learning models contains hyperparameters that need to be specified before learning, to choose these hyperparameters properly, we use cross validation method, and do grid search inside a range of parameters.

To do grid search, you need first specify the parameter region in the "model_params" file::

	n_components=1 # number of PCA components
	C=-15:-8       # the range of penalty factor for kernel ridge regression (log based)
	gamma=-8:-1    # the range gamma parameter for RBF kernel (log based)
	ngrid=50       # number of grid in each dimension

and then run::

	model_selection.py --f_dens density_in_x --f_grad potential_in_x -r 0.4 -n 5 --params model_params

here the `--f_dens` and `--f_grad` indicate the electron density data file and the corresponding potential, `-r` indicate the ratio between training and testing dataset, `-n` indicate the number of folds used in cross validation.

*NOTE*: The grid search program is implemented by Python's `multiprocessing` module, and will use all the available CPU resources by default.

Machine learning & prediction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

After grid search, you will have three new files: "demo_train_data", "demo_test_data" and "demo_best_estimator", these files are used to predict kinetic energy for the new sample and find ground state electron density for new potential. 

*NOTE*: the prediction is done on the testing dataset in "demo_test_data" file.

to see the prediction, run::

	data_process.py -f demo_train_data:demo_test_data:demo_best_estimator --params optim_params pred

`pred` label means we are predicting, and to do prediction, we need to specify parameters for a optimization algorithm (used to find ground state electron density), the "optim_params" files looks like this::

	mu=10      # indicate the chemical potential
	n=1        # indicate the electron number
	step=0.01  # indicate the optimization step length
	tol=1e-5   # indicate the tolerance for optimization


