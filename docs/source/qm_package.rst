Using quantum routine
=====================

Generate periodic potential & hamiltonian
-------------------------------------------

.. math::
   \begin{gather}
   V(x)=\sum_{i=1}^3V_i\left(\cos^2(\pi (x+\phi_i))-1\right)\\
   H_{ij}(k)=\frac{(k+G_i)^2}{2}\delta_{ij}+\hat{V}(G_i-G_j)
   \end{gather}

.. code:: python 
   
    from quantum.utils import simple_potential_gen
    # specify range of V_i and phi_i
    low_V0, high_V0 = 3, 5
    low_phi0, high_phi0 = -0.1, 0.1
    # specify number of plane wave basis &
    # number of cosin function used to compute
    # periodic potential
    n_basis = 10
    n_cos = 3

    params_gen = simple_potential_gen(n_basis, n_cos, low_V0, high_V0, low_phi0, high_phi0, random_state=9302)
    hamilton_mat, Vq = next(params_gen)

Compute electron density & electron kinetic energy
--------------------------------------------------

.. math::
   \begin{gather}
   \hat{\rho}(\mathbf{q})=\sum_{\mathbf{G}}\sum_{n,\mathbf{k}}\Psi_{n,\mathbf{k}}(\mathbf{G}+\mathbf{q})\hat{d}^{\dagger}_{n,\mathbf{k}}\hat{d}_{n,\mathbf{k}}\Psi^*_{n,\mathbf{k}}(\mathbf{G})\\
   T=\sum_{\mathbf{G}}\sum_{n,\mathbf{k}}\frac{(\mathbf{k}+\mathbf{G})^2}{2}\Psi_{n,\mathbf{k}}(\mathbf{G})\hat{d}^{\dagger}_{n,\mathbf{k}}\hat{d}_{n,\mathbf{k}}\Psi^*_{n,\mathbf{k}}(\mathbf{G})
   \end{gather}

.. code:: python

   from quantum.solver import solver
   import numpy as np 
   # use hamilton matrix generated in the last step
   T, densq, mu = solver(n_basis, hamilton_mat, occ=2)
   # transform the electron density back to the (0,1) with 100 real grid
   densx = np.fft.irfft(densq, 100)*100

Generate database
-----------------

Database is generated by running the ``database.py`` script, to execute, simply run::

    python database.py --flag=value

flags can be used to specify the database parameters:

.. option:: --N_SAMPLES <int>

   number of samples in the database file

.. option:: --N_COS <int>
  
   number of cosin function used for building the periodic potential

.. option:: --N_KPOINTS <int>

   number of k points in 1st BZ

.. option:: --N_BASIS <int>

   number of plane wave basis function used to construct the hamilton matrix

.. option:: --LOW_V0 <float>
            --HIGH_V0 <float>

   specify the range of potential strength

.. option:: --LOW_PHI0 <float>
            --HIGH_PHI0 <float>

   specify the range of phase of cosin functions
   
These flags can also be included inside a file ``flagvalue`` ::

    --N_SAMPLES=100
    --N_COS=3
    --N_KPOINTS=100
    ...

and to execute the program, simply run::

    python database.py --flagfile=flagvalue

The program is writen to support MPI, thus we can run it in parallel::

    mpirun -n 4 python database.py --flagfile=flagvalue



